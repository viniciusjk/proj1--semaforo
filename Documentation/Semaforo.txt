=============================================================================
List of generated methods in project: main

THIS TEXT DESCRIPTION IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
=============================================================================

Module "LED_VERMELHO" (component BitIO)
   - LED_VERMELHO_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read 
                and returned. If the direction is [output] then the last written value is returned (see <Safe mode> property 
                for limitations). This method cannot be disabled if direction is [input].
   - LED_VERMELHO_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a 
                memory or a register and this value will be written to the pin after switching to the output mode (using 
                [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the value to 
                the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).
   - LED_VERMELHO_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is 
                available only if the direction = _[output]_ or _[input/output]_.
   - LED_VERMELHO_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only 
                if the direction = _[output]_ or _[input/output]_.
   - LED_VERMELHO_NegVal -Negates (inverts) the output value. It is equivalent to the [PutVal(!GetVal())]. This method is 
                available only if the direction = _[output]_ or _[input/output]_.

Module "TIMER2"    (component TimerInt)
   - TIMER2_Enable -This method enables the component - it starts the timer. Events may be generated 
                (<DisableEvent>/<EnableEvent>).
   - TIMER2_Disable -This method disables the component - it stops the timer. No events will be generated.

Module "TU1"       (component TimerUnit_LDD)
   - TU1_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc. If the property <"Enable in init. code"> is set to 
                "yes" value then the device is also enabled (see the description of the <Enable> method). In this case the 
                <Enable> method is not necessary and needn't to be generated. This method can be called only once. Before the 
                second call of Init the <Deinit> must be called first.
   - TU1_Enable -Enables the component - it starts the signal generation. Events may be generated (see SetEventMask). The 
                method is not available if the counter can't be disabled/enabled by HW.
   - TU1_Disable -Disables the component - it stops signal generation and events calling. The method is not available if the 
                counter can't be disabled/enabled by HW.

Module "LED_AMARELO" (component BitIO)
   - LED_AMARELO_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read 
                and returned. If the direction is [output] then the last written value is returned (see <Safe mode> property 
                for limitations). This method cannot be disabled if direction is [input].
   - LED_AMARELO_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a 
                memory or a register and this value will be written to the pin after switching to the output mode (using 
                [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the value to 
                the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).
   - LED_AMARELO_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is 
                available only if the direction = _[output]_ or _[input/output]_.
   - LED_AMARELO_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only 
                if the direction = _[output]_ or _[input/output]_.
   - LED_AMARELO_NegVal -Negates (inverts) the output value. It is equivalent to the [PutVal(!GetVal())]. This method is 
                available only if the direction = _[output]_ or _[input/output]_.

Module "LED_VERDE" (component BitIO)
   - LED_VERDE_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].
   - LED_VERDE_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a 
                memory or a register and this value will be written to the pin after switching to the output mode (using 
                [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the value to 
                the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).
   - LED_VERDE_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.
   - LED_VERDE_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if 
                the direction = _[output]_ or _[input/output]_.
   - LED_VERDE_NegVal -Negates (inverts) the output value. It is equivalent to the [PutVal(!GetVal())]. This method is 
                available only if the direction = _[output]_ or _[input/output]_.

Module "LED_VERMELHO_PEDESTRE" (component BitIO)
   - LED_VERMELHO_PEDESTRE_SetDir -Sets a pin direction (available only if the direction = _[input/output]_).
   - LED_VERMELHO_PEDESTRE_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin 
                is read and returned. If the direction is [output] then the last written value is returned (see <Safe mode> 
                property for limitations). This method cannot be disabled if direction is [input].
   - LED_VERMELHO_PEDESTRE_PutVal -The specified output value is set. If the direction is [input], the component saves the 
                value to a memory or a register and this value will be written to the pin after switching to the output mode 
                (using [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the 
                value to the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).
   - LED_VERMELHO_PEDESTRE_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method 
                is available only if the direction = _[output]_ or _[input/output]_.
   - LED_VERMELHO_PEDESTRE_NegVal -Negates (inverts) the output value. It is equivalent to the [PutVal(!GetVal())]. This method 
                is available only if the direction = _[output]_ or _[input/output]_.

Module "LED_VERDE_PEDESTRE" (component BitIO)
   - LED_VERDE_PEDESTRE_SetDir -Sets a pin direction (available only if the direction = _[input/output]_).
   - LED_VERDE_PEDESTRE_SetInput -Sets a pin direction to input (available only if the direction = _[input/output]_).
   - LED_VERDE_PEDESTRE_PutVal -The specified output value is set. If the direction is [input], the component saves the value 
                to a memory or a register and this value will be written to the pin after switching to the output mode (using 
                [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the value to 
                the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).
   - LED_VERDE_PEDESTRE_NegVal -Negates (inverts) the output value. It is equivalent to the [PutVal(!GetVal())]. This method is 
                available only if the direction = _[output]_ or _[input/output]_.

Module "BOTON"     (component ExtInt)
   - BOTON_Enable -Enable the component - the external events are accepted. This method is available only if HW module allows 
                enable/disable of the interrupt.
   - BOTON_Disable -Disable the component - the external events are not accepted. This method is available only if HW module 
                allows enable/disable of the interrupt.
   - BOTON_GetVal -Returns the actual value of the input pin of the component.

Module "LDRConverter" (component ADC)
   - LDRConverter_Measure -This method performs one measurement on all channels that are set in the component inspector. (Note: 
                If the <number of conversions> is more than one the conversion of A/D channels is performed specified number of 
                times.)
   - LDRConverter_GetValue -Returns the last measured values for all channels. Format and width of the value is a native format 
                of the A/D converter.
   - LDRConverter_GetValue16 -This method returns the last measured values of all channels. Compared with <GetValue> method 
                this method returns more accurate result if the <number of conversions> is greater than 1 and <AD resolution> 
                is less than 16 bits. In addition, the user code dependency on <AD resolution> is eliminated.
   - LDRConverter_GetChanValue16 -This method returns the last measured value of the required channel. Compared with 
                <GetChanValue> method this method returns more accurate result if the <number of conversions> is greater than 1 
                and <AD resolution> is less than 16 bits. In addition, the user code dependency on <AD resolution> is 
                eliminated.
   - LDRConverter_Calibrate -This method starts self calibration process. Calibration is typically used to remove the effects 
                of the gain and offset from a specific reading.

Module "Cpu"       (component MKL25Z128LK4)

===================================================================================
